#!/usr/bin/env python
"""
Download from W&B the raw dataset and apply some basic data cleaning, exporting the result to a new artifact
"""
import argparse
import logging
import wandb
import pandas as pd


logging.basicConfig(level=logging.INFO, format="%(asctime)-15s %(message)s")
logger = logging.getLogger()


def go(args):

    run = wandb.init(job_type="basic_cleaning")
    run.config.update(args)

    # Download input artifact. This will also log that this script is using this
    # particular version of the artifact
    # artifact_local_path = run.use_artifact(args.input_artifact).file()

    ######################
    # YOUR CODE HERE     #
    ######################
    logger.info("Initialization of wandb and loading the input artifact.")
    local_path = wandb.use_artifact(args.input_artifact).file()
    df = pd.read_csv(local_path)

    logger.info("Data cleaning.")
    logger.info("Removing outlier price by replacing by min and max")
    min_price = args.min_price
    max_price = args.max_price
    idx = df['price'].between(min_price, max_price)
    df = df[idx].copy()
    logger.info("Converting last_review to datetime.")
    df['last_review'] = pd.to_datetime(df['last_review'])
    logger.info("Remove samples with bad coordinates.")
    idx = df['longitude'].between(-74.25, -73.50) & df['latitude'].between(40.5, 41.2)
    df = df[idx].copy()

    logger.info("Saving the cleaned dataset")
    df.to_csv(args.output_artifact, index=False)

    logger.info("Saving the output artifact on wandb")
    artifact = wandb.Artifact(
        args.output_artifact,
        type=args.output_type,
        description=args.output_description,
    )
    artifact.add_file(args.output_artifact)
    run.log_artifact(artifact)


if __name__ == "__main__":

    parser = argparse.ArgumentParser(description="A very basic data cleaning")

    parser.add_argument(
        "--input_artifact", 
        type=str,
        help="The input artifact taken by basic_cleaning corresponding to the dataset",
        required=True
    )

    parser.add_argument(
        "--output_artifact", 
        type=str,
        help="The output artifact generated by basic_cleaning which is the cleaned dataset",
        required=True
    )

    parser.add_argument(
        "--output_type", 
        type=str,
        help="The type of the output",
        default="Pandas Dataframe",
        required=False
    )

    parser.add_argument(
        "--output_description", 
        type=str,
        help="The output description",
        required=False,
        default="The input dataset is preprocessed and cleaned"
    )

    parser.add_argument(
        "--min_price", 
        type=float,
        help="The minimal value of a price in the dataset",
        required=False,
        default=10
    )

    parser.add_argument(
        "--max_price", 
        type=float,
        help="The maximal value of a price in the dataset",
        required=False,
        default=350
    )

    args = parser.parse_args()

    go(args)
